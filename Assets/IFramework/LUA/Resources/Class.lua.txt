


-- 创建一个类

-- ~~~ lua

-- -- 定义名为 Shape 的基础类
-- local Shape = class("Shape")

-- -- ctor() 是类的构造函数，在调用 Shape.new() 创建 Shape 对象实例时会自动执行
-- function Shape:ctor(shapeName)
--     self.shapeName = shapeName
--     printf("Shape:ctor(%s)", self.shapeName)
-- end

-- -- 为 Shape 定义个名为 draw() 的方法
-- function Shape:draw()
--     printf("draw %s", self.shapeName)
-- end

-- --

-- -- Circle 是 Shape 的继承类
-- local Circle = class("Circle", Shape)

-- function Circle:ctor()
--     -- 如果继承类覆盖了 ctor() 构造函数，那么必须手动调用父类构造函数
--     -- 类名.super 可以访问指定类的父类
--     Circle.super.ctor(self, "circle")
--     self.radius = 100
-- end

-- function Circle:setRadius(radius)
--     self.radius = radius
-- end

-- -- 覆盖父类的同名方法
-- function Circle:draw()
--     printf("draw %s, raidus = %0.2f", self.shapeName, self.raidus)
-- end

-- local Rectangle = class("Rectangle", Shape)
-- function Rectangle:ctor()
--     Rectangle.super.ctor(self, "rectangle")
-- end

-- local circle = Circle.new()             -- 输出: Shape:ctor(circle)
-- circle:setRaidus(200)
-- circle:draw()                           -- 输出: draw circle, radius = 200.00

-- local rectangle = Rectangle.new()       -- 输出: Shape:ctor(rectangle)
-- rectangle:draw()                        -- 输出: draw rectangle


-- ### 高级用法
-- class() 除了定义纯 Lua 类之外，还可以从 C++ 对象继承类。
-- 比如需要创建一个工具栏，并在添加按钮时自动排列已有的按钮，那么我们可以使用如下的代码：

-- -- 从 cc.Node 对象派生 Toolbar 类，该类具有 cc.Node 的所有属性和行为
-- local Toolbar = class("Toolbar", function()
--     return display.newNode() -- 返回一个 cc.Node 对象
-- end)

-- -- 构造函数
-- function Toolbar:ctor()
--     self.buttons = {} -- 用一个 table 来记录所有的按钮
-- end

-- -- 添加一个按钮，并且自动设置按钮位置
-- function Toolbar:addButton(button)
--     -- 将按钮对象加入 table
--     self.buttons[#self.buttons + 1] = button

--     -- 添加按钮对象到 cc.Node 中，以便显示该按钮
--     -- 因为 Toolbar 是从 cc.Node 继承的，所以可以使用 addChild() 方法
--     self:addChild(button)

--     -- 按照按钮数量，调整所有按钮的位置
--     local x = 0
--     for _, button in ipairs(self.buttons) do
--         button:setPosition(x, 0)
--         -- 依次排列按钮，每个按钮之间间隔 10 点
--         x = x + button:getContentSize().width + 10
--     end
-- end

-- class() 的这种用法让我们可以在 C++ 对象基础上任意扩展行为。

-- 既然是继承，自然就可以覆盖 C++ 对象的方法：

-- ~~~ lua

-- function Toolbar:setPosition(x, y)
--     -- 由于在 Toolbar 继承类中覆盖了 cc.Node 对象的 setPosition() 方法
--     -- 所以我们要用以下形式才能调用到 cc.Node 原本的 setPosition() 方法
--     getmetatable(self).setPosition(self, x, y)

--     printf("x = %0.2f, y = %0.2f", x, y)
-- end

-- ~~~

-- **注意:** Lua 继承类覆盖的方法并不能从 C++ 调用到。也就是说通过 C++ 代码调用这个 cc.Node 对象的 setPosition() 方法时，并不会执行我们在 Lua 中定义的 Toolbar:setPosition() 方法。

-- @param string classname 类名
-- @param [mixed super] 父类或者创建对象实例的函数
-- @return table


local setmetatableindex_
setmetatableindex_ = function(t, index)
    if type(t) == "userdata" then
        local peer = tolua.getpeer(t)
        if not peer then
            peer = {}
            tolua.setpeer(t, peer)
        end
        setmetatableindex_(peer, index)
    else
        local mt = getmetatable(t)
        if not mt then mt = {} end
        if not mt.__index then
            mt.__index = index
            setmetatable(t, mt)
        elseif mt.__index ~= index then
            setmetatableindex_(mt, index)
        end
    end
end
setmetatableindex = setmetatableindex_
function class(classname, ...)
    local cls = {__cname = classname}
    local supers = {...}
    for _, super in ipairs(supers) do
        local superType = type(super)
        -- PTPrint(superType == "nil" or superType == "table" or superType == "function",
        --     string.format("class() - create class \"%s\" with invalid super class type \"%s\"",
        --         classname, superType))

        if superType == "function" then
            -- PTPrint(cls.__create == nil,
            --     string.format("class() - create class \"%s\" with more than one creating function",
            --         classname));
            -- if super is function, set it to __create
            cls.__create = super
            cls.ctor = function() end
        elseif superType == "table" then
            if super[".isclass"] then
                -- super is native class
                -- PTPrint(cls.__create == nil,
                --     string.format("class() - create class \"%s\" with more than one creating function or native class",
                --         classname));
                cls.__create = function() return super:create() end
            else
                -- super is pure lua class
                cls.__supers = cls.__supers or {}
                cls.__supers[#cls.__supers + 1] = super
                if not cls.super then
                    -- set first super pure lua class as class.super
                    cls.super = super
                end
            end
        else
            -- PTPrint(string.format("class() - create class \"%s\" with invalid super type",
            --             classname), 0)
        end
    end
    cls.__index = cls
    if not cls.__supers or #cls.__supers == 1 then
        setmetatable(cls, {__index = cls.super})
    else
        setmetatable(cls, {__index = function(_, key)
            local supers = cls.__supers
            for i = 1, #supers do
                local super = supers[i]
                if super[key] then return super[key] end
            end
        end})
    end
    if not cls.ctor then
        -- add default constructor
        cls.ctor = function() end
    end

    cls.new = function(...)
        local instance
        if cls.__create then
            instance = cls.__create(...)
        else
            instance = {}
        end
        setmetatableindex(instance, cls)
        instance.class = cls
        instance:ctor(...)
        return instance
    end
    cls.create = function(_, ...)
        return cls.new(...)
    end
    return cls
end

-- function IsTypeOf(obj, classname)
--     local t = type(obj)
--     local mt
--     if t == "table" then
--         mt = getmetatable(obj)
--         print(123)
--     elseif t == "userdata" then
--         mt = tolua.getpeer(obj)
--     end

--     while mt do
--         if mt.__cname == classname then
--             return true
--         end
--                 print(mt.__cname)

--         mt = mt.super
--     end

--     return false
-- end
